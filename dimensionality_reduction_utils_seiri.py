# -*- coding: utf-8 -*-
"""整理版 dimensionality_reduction_utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mH-6nt2ho-A2slQUWMHbbcKWJM0ch0Z0
"""

# ================================================
# dimensionality_reduction_utils.py
# 次元削減タスク用：モデル学習・適用・保存ユーティリティ関数
# ================================================

import pandas as pd
import numpy as np
import joblib
import logging
from typing import Any, Dict
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler

# ログ設定
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ================================================
# 次元削減モデル学習
# ================================================

def train_dimensionality_reduction(X: pd.DataFrame,
                                   method: str = "pca",
                                   params: Dict = None) -> Any:
    """
    指定された手法で次元削減モデルを学習する関数
    """
    logger.info(f"🔄 次元削減モデル（{method}）学習開始")

    if params is None:
        params = {}

    if method.lower() == "pca":
        default_params = {"n_components": 2}
        default_params.update(params)
        model = PCA(**default_params)

    elif method.lower() == "tsne":
        default_params = {"n_components": 2, "random_state": 42}
        default_params.update(params)
        model = TSNE(**default_params)

    else:
        logger.error(f"❌ 未対応の次元削減手法: {method}")
        return None

    if method.lower() != "tsne":
        model.fit(X)
        logger.info("✅ モデル学習完了")
    else:
        logger.info("✅ t-SNEは fit_transform() で直接適用されます")

    return model

# ================================================
# 次元削減適用
# ================================================

def apply_dimensionality_reduction(model: Any, X: pd.DataFrame, method: str = "pca") -> pd.DataFrame:
    """
    学習済み次元削減モデルを使ってデータを変換する関数
    """
    try:
        if method.lower() == "tsne":
            result = model.fit_transform(X)
        else:
            result = model.transform(X)

        return pd.DataFrame(result, columns=[f"{method.upper()}_{i+1}" for i in range(result.shape[1])])

    except Exception as e:
        logger.error(f"❌ 次元削減適用エラー: {e}")
        return pd.DataFrame()

# ================================================
# モデル保存・読込
# ================================================

def save_model(model: Any, path: str) -> None:
    """
    学習済み次元削減モデルを保存する関数
    """
    try:
        joblib.dump(model, path)
        logger.info(f"✅ モデル保存完了: {path}")
    except Exception as e:
        logger.error(f"❌ モデル保存エラー: {e}")

def load_model(path: str) -> Any:
    """
    保存された次元削減モデルを読み込む関数
    """
    try:
        model = joblib.load(path)
        logger.info(f"✅ モデル読込完了: {path}")
        return model
    except Exception as e:
        logger.error(f"❌ モデル読込エラー: {e}")
        return None