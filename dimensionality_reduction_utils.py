# -*- coding: utf-8 -*-
"""dimensionality_reduction_utils.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wdBmdpMolVPBI4NHUqqFHUS0_DmkllD9

1. インポート・環境設定（ロギング含む）
2. データロード・前処理（標準化・スケーリング）
3. 次元削減アルゴリズム適用（PCA, t-SNE, UMAP対応予定）
4. 結果の可視化（2D・3Dプロット）
5. ファイル保存・読込（モデル保存）
6. ファイルアップロード支援
"""

# ================================
# インポートと環境設定
# ================================

import os
import joblib
import logging
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
try:
    import umap
    UMAP_AVAILABLE = True
except ImportError:
    UMAP_AVAILABLE = False

from google.colab import drive
from google.colab import files

from typing import Any, Dict, List, Optional, Tuple, Union

# ログ設定
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)
# ================================
# データロード・前処理
# ================================

def load_csv_data(file_path: str, features_to_drop: Optional[List[str]] = None) -> pd.DataFrame:
    """CSVファイルからデータをロード"""
    try:
        if not os.path.exists(file_path) and '/content/drive' not in file_path:
            file_path = os.path.join('/content/drive/MyDrive/', file_path)

        df = pd.read_csv(file_path)
        logger.info(f"📊 データロード完了: {df.shape}")

        if features_to_drop:
            df = df.drop(columns=features_to_drop)

        return df
    except Exception as e:
        logger.error(f"❌ CSVロード失敗: {e}")
        return None

def standardize_data(X: pd.DataFrame) -> pd.DataFrame:
    """特徴量を標準化（平均0、分散1）"""
    try:
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        logger.info("✅ 特徴量標準化完了")
        return pd.DataFrame(X_scaled, columns=X.columns)
    except Exception as e:
        logger.error(f"❌ 標準化失敗: {e}")
        return None
# ================================
# 次元削減アルゴリズム適用
# ================================

def apply_pca(X: pd.DataFrame, n_components: int = 2) -> np.ndarray:
    """PCAによる次元削減"""
    try:
        pca = PCA(n_components=n_components)
        components = pca.fit_transform(X)
        logger.info(f"✅ PCA次元削減完了（{n_components}次元）")
        return components
    except Exception as e:
        logger.error(f"❌ PCA失敗: {e}")
        return None

def apply_tsne(X: pd.DataFrame, n_components: int = 2, perplexity: int = 30, n_iter: int = 1000) -> np.ndarray:
    """t-SNEによる次元削減"""
    try:
        tsne = TSNE(n_components=n_components, perplexity=perplexity, n_iter=n_iter, random_state=42)
        components = tsne.fit_transform(X)
        logger.info(f"✅ t-SNE次元削減完了（{n_components}次元）")
        return components
    except Exception as e:
        logger.error(f"❌ t-SNE失敗: {e}")
        return None

def apply_umap(X: pd.DataFrame, n_components: int = 2) -> Optional[np.ndarray]:
    """UMAPによる次元削減"""
    if not UMAP_AVAILABLE:
        logger.error("❌ UMAPがインストールされていません")
        return None
    try:
        reducer = umap.UMAP(n_components=n_components, random_state=42)
        components = reducer.fit_transform(X)
        logger.info(f"✅ UMAP次元削減完了（{n_components}次元）")
        return components
    except Exception as e:
        logger.error(f"❌ UMAP失敗: {e}")
        return None
# ================================
# 次元削減結果の可視化
# ================================

def plot_2d_components(components: np.ndarray, labels: Optional[np.ndarray] = None, title: str = "2D Plot") -> None:
    """2D次元削減結果をプロット"""
    try:
        df_plot = pd.DataFrame({
            "Dim1": components[:, 0],
            "Dim2": components[:, 1]
        })
        if labels is not None:
            df_plot["Label"] = labels
            fig = px.scatter(df_plot, x="Dim1", y="Dim2", color=df_plot["Label"].astype(str), title=title)
        else:
            fig = px.scatter(df_plot, x="Dim1", y="Dim2", title=title)
        fig.show()
    except Exception as e:
        logger.error(f"❌ 2Dプロット失敗: {e}")

def plot_3d_components(components: np.ndarray, labels: Optional[np.ndarray] = None, title: str = "3D Plot") -> None:
    """3D次元削減結果をプロット"""
    try:
        df_plot = pd.DataFrame({
            "Dim1": components[:, 0],
            "Dim2": components[:, 1],
            "Dim3": components[:, 2]
        })
        if labels is not None:
            df_plot["Label"] = labels
            fig = px.scatter_3d(df_plot, x="Dim1", y="Dim2", z="Dim3", color=df_plot["Label"].astype(str), title=title)
        else:
            fig = px.scatter_3d(df_plot, x="Dim1", y="Dim2", z="Dim3", title=title)
        fig.show()
    except Exception as e:
        logger.error(f"❌ 3Dプロット失敗: {e}")
# ================================
# ファイル保存・読込
# ================================

def save_model_to_drive(model: Any, relative_path: str) -> None:
    """次元削減モデルをGoogle Driveに保存"""
    try:
        full_path = os.path.join('/content/drive/MyDrive/', relative_path)
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        joblib.dump(model, full_path)
        logger.info(f"✅ モデル保存完了: {full_path}")
    except Exception as e:
        logger.error(f"❌ モデル保存失敗: {e}")

def load_model_from_drive(relative_path: str) -> Any:
    """Google Driveから次元削減モデルをロード"""
    try:
        full_path = os.path.join('/content/drive/MyDrive/', relative_path)
        return joblib.load(full_path)
    except Exception as e:
        logger.error(f"❌ モデルロード失敗: {e}")
        return None
# ================================
# ファイルアップロード支援
# ================================

def upload_file_from_local() -> Dict[str, Any]:
    """ローカルPCからファイルをアップロード"""
    logger.info("📂 ローカルファイルをアップロードしてください")
    uploaded = files.upload()
    logger.info(f"✅ アップロード完了: {list(uploaded.keys())}")
    return uploaded