# -*- coding: utf-8 -*-
"""shap_utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hkfchzNMNnMHjqHe25vlU-8AKMqbwBzb
"""

# ================================================
# shap_utils.py
# SHAP解析用ユーティリティ関数集
# ================================================

import shap
import joblib
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import os
import logging
from typing import Any, Optional, Union

# ログ設定
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ================================================
# SHAP値計算関数
# ================================================

def compute_shap_values(model: Any, X_sample: pd.DataFrame) -> shap.Explanation:
    """
    SHAP値を計算する関数。モデルの種類に応じて自動でExplainerを初期化。

    Args:
        model (Any): 学習済みモデル（XGBoost, RandomForestなど）
        X_sample (pd.DataFrame): SHAP計算に使う入力データ（通常はX_test）

    Returns:
        shap.Explanation: SHAP値オブジェクト
    """
    try:
        logger.info("🔍 SHAP Explainer を初期化しています...")
        if hasattr(model, "predict_proba"):
            explainer = shap.Explainer(model.predict_proba, X_sample)
        else:
            explainer = shap.Explainer(model, X_sample)

        shap_values = explainer(X_sample)
        logger.info("✅ SHAP値計算完了")
        return shap_values

    except Exception as e:
        logger.error(f"❌ SHAP値計算エラー: {e}")
        return None

# ================================================
# SHAP可視化関数（Summary／Waterfall）
# ================================================

def plot_shap_summary(shap_values: shap.Explanation, features: pd.DataFrame) -> None:
    """
    SHAP Summary Plotを描画する関数

    Args:
        shap_values (shap.Explanation): 計算済みのSHAP値
        features (pd.DataFrame): 入力特徴量データ
    """
    try:
        logger.info("📈 SHAP Summary Plotを描画中...")
        shap.summary_plot(shap_values.values, features)
        logger.info("✅ Summary Plot描画完了")
    except Exception as e:
        logger.error(f"❌ Summary Plot描画エラー: {e}")


def plot_shap_waterfall(shap_values: shap.Explanation, row_index: int = 0) -> None:
    """
    指定サンプルのSHAP Waterfall Plotを描画する関数

    Args:
        shap_values (shap.Explanation): 計算済みのSHAP値
        row_index (int, optional): プロットするサンプルのインデックス（デフォルト0）
    """
    try:
        logger.info(f"📈 SHAP Waterfall Plotを描画中（サンプル index={row_index}）...")
        shap.plots.waterfall(shap_values[row_index])
        logger.info("✅ Waterfall Plot描画完了")
    except Exception as e:
        logger.error(f"❌ Waterfall Plot描画エラー: {e}")

# ================================================
# SHAP 3D可視化関数
# ================================================

def plot_shap_3d(shap_values, X_sample, feature_x, feature_y, shap_feature=None, class_index=1):
    print("📊 plot_shap_3d() 実行中...")
    try:
        import pandas as pd
        import plotly.express as px
        import shap
        import numpy as np

        # Explanation型の場合は .values を抽出
        if isinstance(shap_values, shap.Explanation):
            values = shap_values.values
        else:
            values = shap_values

        # 3次元SHAP値（多クラス） → 指定クラスだけ抽出
        if values.ndim == 3:
            values = values[:, :, class_index]

        # shap_feature が指定されていれば、その特徴に限定
        if shap_feature:
            if shap_feature not in X_sample.columns:
                raise ValueError(f"指定された特徴名 '{shap_feature}' は X_sample に存在しません。")
            feature_index = X_sample.columns.get_loc(shap_feature)
            shap_z = values[:, feature_index].flatten()
            title_z = shap_feature
        else:
            shap_z = values.mean(axis=1).flatten()
            title_z = "SHAP mean"

        df_plot = pd.DataFrame({
            "X": X_sample[feature_x].values.flatten(),
            "Y": X_sample[feature_y].values.flatten(),
            "SHAP": shap_z
        })

        fig = px.scatter_3d(
            df_plot, x="X", y="Y", z="SHAP",
            color="SHAP", opacity=0.7,
            title=f"3D SHAP Plot: {feature_x} × {feature_y} × {title_z}"
        )
        fig.show(renderer="colab")

    except Exception as e:
        print(f"❌ 3D SHAPプロットエラー: {e}")



# ================================================
# SHAP値保存・読み込み関数
# ================================================

def save_shap_values(shap_values: shap.Explanation, path: str) -> None:
    """
    SHAP値をファイルに保存する関数（pkl形式）

    Args:
        shap_values (shap.Explanation): 保存するSHAP値
        path (str): 保存先パス
    """
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        joblib.dump(shap_values, path)
        logger.info(f"✅ SHAP値保存完了: {path}")

    except Exception as e:
        logger.error(f"❌ SHAP保存エラー: {e}")


def load_shap_values(path: str) -> Optional[shap.Explanation]:
    """
    ファイルからSHAP値を読み込む関数

    Args:
        path (str): 読み込み元パス

    Returns:
        shap.Explanation: 読み込んだSHAP値オブジェクト
    """
    try:
        shap_values = joblib.load(path)
        logger.info(f"✅ SHAP値読込完了: {path}")
        return shap_values

    except Exception as e:
        logger.error(f"❌ SHAP読込エラー: {e}")
        return None
