# -*- coding: utf-8 -*-
"""整理版 clustering_utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xRxWkJsF0DuO_gfxheTGUklDbZ3Hu5Yt
"""

# ================================================
# clustering_utils.py
# クラスタリングタスク用：モデル学習・評価ユーティリティ関数
# ================================================

import pandas as pd
import numpy as np
import joblib
import logging
from typing import Any, Dict
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.metrics import silhouette_score

# ログ設定
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ================================================
# モデル学習
# ================================================

def train_clustering_model(X: pd.DataFrame,
                            model_type: str = "kmeans",
                            params: Dict = None) -> Any:
    """
    指定されたクラスタリングモデルで学習を行う関数
    """
    logger.info(f"🔄 {model_type} クラスタリング学習開始")

    if params is None:
        params = {}

    if model_type.lower() == "kmeans":
        default_params = {'n_clusters': 3, 'random_state': 42}
        default_params.update(params)
        model = KMeans(**default_params)

    elif model_type.lower() == "dbscan":
        default_params = {'eps': 0.5, 'min_samples': 5}
        default_params.update(params)
        model = DBSCAN(**default_params)

    elif model_type.lower() == "agglomerative":
        default_params = {'n_clusters': 3, 'linkage': 'ward'}
        default_params.update(params)
        model = AgglomerativeClustering(**default_params)

    else:
        logger.error(f"❌ 未対応のクラスタリングモデルタイプ: {model_type}")
        return None

    model.fit(X)
    logger.info("✅ クラスタリング学習完了")
    return model

# ================================================
# モデル評価
# ================================================

def evaluate_clustering_model(model: Any, X: pd.DataFrame) -> None:
    """
    クラスタリングモデルのシルエットスコアを計算する関数
    """
    try:
        if hasattr(model, "labels_"):
            labels = model.labels_
        else:
            labels = model.predict(X)

        score = silhouette_score(X, labels)
        logger.info(f"✅ シルエットスコア: {score:.4f}")

    except Exception as e:
        logger.error(f"❌ クラスタリング評価エラー: {e}")

# ================================================
# モデル保存・読込
# ================================================

def save_model(model: Any, path: str) -> None:
    """
    学習済みクラスタリングモデルを保存する関数
    """
    try:
        joblib.dump(model, path)
        logger.info(f"✅ モデル保存完了: {path}")
    except Exception as e:
        logger.error(f"❌ モデル保存エラー: {e}")

def load_model(path: str) -> Any:
    """
    保存されたクラスタリングモデルを読み込む関数
    """
    try:
        model = joblib.load(path)
        logger.info(f"✅ モデル読込完了: {path}")
        return model
    except Exception as e:
        logger.error(f"❌ モデル読込エラー: {e}")
        return None