# -*- coding: utf-8 -*-
"""整理版 anomaly_detection_utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Qz8KyQrsq-ICj3ja0jM_SjADQtLfvhM
"""

# ================================================
# anomaly_detection_utils.py
# 異常検知タスク用：モデル学習・スコア出力・保存ユーティリティ関数
# ================================================

import pandas as pd
import numpy as np
import joblib
import logging
from typing import Any, Dict
from sklearn.ensemble import IsolationForest
from sklearn.svm import OneClassSVM
from sklearn.metrics import classification_report

# ログ設定
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ================================================
# 異常検知モデル学習
# ================================================

def train_anomaly_model(X: pd.DataFrame,
                        model_type: str = "isolation_forest",
                        params: Dict = None) -> Any:
    """
    指定された異常検知モデルを学習する関数
    """
    logger.info(f"🔄 異常検知モデル（{model_type}）学習開始")

    if params is None:
        params = {}

    if model_type.lower() == "isolation_forest":
        default_params = {"n_estimators": 100, "contamination": 0.1, "random_state": 42}
        default_params.update(params)
        model = IsolationForest(**default_params)

    elif model_type.lower() == "one_class_svm":
        default_params = {"kernel": "rbf", "gamma": "scale", "nu": 0.05}
        default_params.update(params)
        model = OneClassSVM(**default_params)

    else:
        logger.error(f"❌ 未対応の異常検知モデル: {model_type}")
        return None

    model.fit(X)
    logger.info("✅ モデル学習完了")
    return model

# ================================================
# 異常スコア・評価
# ================================================

def evaluate_anomaly_model(model: Any, X: pd.DataFrame, y_true: pd.Series) -> None:
    """
    異常検知モデルによる予測と評価を行う関数（y_trueは1:正常, -1:異常）
    """
    try:
        y_pred = model.predict(X)
        logger.info("📊 Classification Report:")
        logger.info("\n" + classification_report(y_true, y_pred))

    except Exception as e:
        logger.error(f"❌ 異常検知評価エラー: {e}")

# ================================================
# モデル保存・読込
# ================================================

def save_model(model: Any, path: str) -> None:
    """
    学習済み異常検知モデルを保存
    """
    try:
        joblib.dump(model, path)
        logger.info(f"✅ モデル保存完了: {path}")
    except Exception as e:
        logger.error(f"❌ モデル保存エラー: {e}")

def load_model(path: str) -> Any:
    """
    異常検知モデルの読込
    """
    try:
        model = joblib.load(path)
        logger.info(f"✅ モデル読込完了: {path}")
        return model
    except Exception as e:
        logger.error(f"❌ モデル読込エラー: {e}")
        return None