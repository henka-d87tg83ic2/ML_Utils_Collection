# -*- coding: utf-8 -*-
"""整理版 regression_utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1emmC9SffQCwR8yhgzdbX0Kc7jN8h6pEC
"""

# ================================================
# regression_utils.py
# 回帰タスク用：モデル学習・評価ユーティリティ関数
# ================================================

import pandas as pd
import numpy as np
import joblib
import logging
from typing import Any, Dict
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from xgboost import XGBRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression

# ログ設定
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ================================================
# モデル学習・チューニング
# ================================================

def train_regression_model(X_train: pd.DataFrame, y_train: pd.Series,
                            model_type: str = "xgboost",
                            params: Dict = None) -> Any:
    """
    指定されたモデルで回帰学習を行う関数
    """
    logger.info(f"🔄 {model_type} モデル学習開始")

    if params is None:
        params = {}

    if model_type.lower() == "xgboost":
        default_params = {
            'learning_rate': 0.1,
            'max_depth': 5,
            'n_estimators': 100,
            'random_state': 42
        }
        default_params.update(params)
        model = XGBRegressor(**default_params)

    elif model_type.lower() == "random_forest":
        default_params = {
            'n_estimators': 100,
            'max_depth': 10,
            'random_state': 42
        }
        default_params.update(params)
        model = RandomForestRegressor(**default_params)

    elif model_type.lower() == "linear":
        model = LinearRegression()

    else:
        logger.error(f"❌ 未対応のモデルタイプ: {model_type}")
        return None

    model.fit(X_train, y_train)
    logger.info("✅ モデル学習完了")
    return model

# ================================================
# モデル評価
# ================================================

def evaluate_regression_model(model: Any, X_test: pd.DataFrame, y_test: pd.Series) -> None:
    """
    回帰モデルのRMSE、MAE、R2スコアを出力する関数
    """
    try:
        preds = model.predict(X_test)
        rmse = mean_squared_error(y_test, preds, squared=False)
        mae = mean_absolute_error(y_test, preds)
        r2 = r2_score(y_test, preds)

        logger.info(f"✅ RMSE: {rmse:.4f}")
        logger.info(f"✅ MAE: {mae:.4f}")
        logger.info(f"✅ R2 Score: {r2:.4f}")

    except Exception as e:
        logger.error(f"❌ 回帰モデル評価エラー: {e}")

# ================================================
# モデル保存・読込
# ================================================

def save_model(model: Any, path: str) -> None:
    """
    学習済み回帰モデルを保存する関数
    """
    try:
        joblib.dump(model, path)
        logger.info(f"✅ モデル保存完了: {path}")
    except Exception as e:
        logger.error(f"❌ モデル保存エラー: {e}")

def load_model(path: str) -> Any:
    """
    保存された回帰モデルを読み込む関数
    """
    try:
        model = joblib.load(path)
        logger.info(f"✅ モデル読込完了: {path}")
        return model
    except Exception as e:
        logger.error(f"❌ モデル読込エラー: {e}")
        return None