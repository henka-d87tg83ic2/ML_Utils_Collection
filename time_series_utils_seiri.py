# -*- coding: utf-8 -*-
"""整理版 time_series_utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rvMUmtS9q50YayMfOKPtOaFzWOvO_4U-
"""

# ================================================
# time_series_utils.py
# 時系列タスク用：モデル学習・予測・保存ユーティリティ関数
# ================================================

import pandas as pd
import numpy as np
import joblib
import logging
from typing import Any, Dict
from sklearn.metrics import mean_squared_error, mean_absolute_error
from statsmodels.tsa.arima.model import ARIMA

# ログ設定
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ================================================
# 時系列モデル学習
# ================================================

def train_arima_model(series: pd.Series, order: tuple = (1, 1, 1)) -> Any:
    """
    ARIMAモデルを学習する関数

    Args:
        series (pd.Series): 時系列データ
        order (tuple): ARIMAの(AR, 差分, MA)の順

    Returns:
        学習済みARIMAモデル
    """
    try:
        model = ARIMA(series, order=order)
        fitted_model = model.fit()
        logger.info(f"✅ ARIMAモデル学習完了: order={order}")
        return fitted_model
    except Exception as e:
        logger.error(f"❌ ARIMAモデル学習エラー: {e}")
        return None

# ================================================
# 予測と評価
# ================================================

def forecast_and_evaluate(model: Any, steps: int, actual: pd.Series) -> None:
    """
    学習済みARIMAモデルで将来予測し、実測値と比較評価する関数
    """
    try:
        forecast = model.forecast(steps=steps)
        forecast = forecast[:len(actual)]

        rmse = mean_squared_error(actual, forecast, squared=False)
        mae = mean_absolute_error(actual, forecast)

        logger.info(f"✅ RMSE: {rmse:.4f}")
        logger.info(f"✅ MAE: {mae:.4f}")

    except Exception as e:
        logger.error(f"❌ 予測・評価エラー: {e}")

# ================================================
# モデル保存・読込
# ================================================

def save_model(model: Any, path: str) -> None:
    """
    学習済み時系列モデルを保存
    """
    try:
        joblib.dump(model, path)
        logger.info(f"✅ モデル保存完了: {path}")
    except Exception as e:
        logger.error(f"❌ モデル保存エラー: {e}")

def load_model(path: str) -> Any:
    """
    学習済み時系列モデルを読み込み
    """
    try:
        model = joblib.load(path)
        logger.info(f"✅ モデル読込完了: {path}")
        return model
    except Exception as e:
        logger.error(f"❌ モデル読込エラー: {e}")
        return None