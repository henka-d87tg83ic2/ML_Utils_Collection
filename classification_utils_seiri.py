# -*- coding: utf-8 -*-
"""整理版 classification_utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wPzSlkrDUUU2ILGxFNpQDgKW-z-RuyhK
"""

# ================================================
# classification_utils.py
# 分類タスク用：モデル学習・評価ユーティリティ関数
# ================================================

import pandas as pd
import numpy as np
import joblib
import logging
from typing import Any, Dict
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc
from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC

# ログ設定
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ================================================
# モデル学習・チューニング
# ================================================

def train_model(X_train: pd.DataFrame, y_train: pd.Series,
                model_type: str = "xgboost",
                params: Dict = None,
                num_class: int = None) -> Any:
    """
    指定されたモデルで学習を行う関数
    """
    logger.info(f"🔄 {model_type} モデル学習開始")

    if params is None:
        params = {}

    if model_type.lower() == "xgboost":
        default_params = {
            'learning_rate': 0.1,
            'max_depth': 5,
            'n_estimators': 100,
            'random_state': 42
        }
        if num_class and num_class > 2:
            default_params.update({
                'objective': 'multi:softprob',
                'num_class': num_class,
                'eval_metric': 'mlogloss'
            })
        else:
            default_params.update({
                'objective': 'binary:logistic',
                'eval_metric': 'logloss'
            })
        default_params.update(params)
        model = XGBClassifier(**default_params)

    elif model_type.lower() == "random_forest":
        default_params = {
            'n_estimators': 100,
            'max_depth': 10,
            'random_state': 42
        }
        default_params.update(params)
        model = RandomForestClassifier(**default_params)

    elif model_type.lower() == "logistic":
        default_params = {
            'C': 1.0,
            'penalty': 'l2',
            'solver': 'lbfgs',
            'max_iter': 1000,
            'random_state': 42
        }
        if num_class and num_class > 2:
            default_params['multi_class'] = 'multinomial'
        default_params.update(params)
        model = LogisticRegression(**default_params)

    elif model_type.lower() == "svm":
        default_params = {
            'C': 1.0,
            'kernel': 'rbf',
            'gamma': 'scale',
            'probability': True,
            'random_state': 42
        }
        default_params.update(params)
        model = SVC(**default_params)

    else:
        logger.error(f"❌ 未対応のモデルタイプ: {model_type}")
        return None

    model.fit(X_train, y_train)
    logger.info("✅ モデル学習完了")
    return model

# ================================================
# モデル評価
# ================================================

def evaluate_model(model: Any, X_test: pd.DataFrame, y_test: pd.Series) -> None:
    """
    モデルのAccuracy、Classification Report、Confusion Matrixを出力する関数
    """
    try:
        preds = model.predict(X_test)
        logger.info(f"✅ Accuracy: {accuracy_score(y_test, preds):.4f}")
        logger.info("📄 Classification Report:\n" + classification_report(y_test, preds))

        cm = confusion_matrix(y_test, preds)
        logger.info("📊 Confusion Matrix:")
        logger.info(f"\n{cm}")

    except Exception as e:
        logger.error(f"❌ モデル評価エラー: {e}")

# ================================================
# モデル保存・読込
# ================================================

def save_model(model: Any, path: str) -> None:
    """
    学習済みモデルを保存する関数
    """
    try:
        joblib.dump(model, path)
        logger.info(f"✅ モデル保存完了: {path}")
    except Exception as e:
        logger.error(f"❌ モデル保存エラー: {e}")

def load_model(path: str) -> Any:
    """
    保存されたモデルを読み込む関数
    """
    try:
        model = joblib.load(path)
        logger.info(f"✅ モデル読込完了: {path}")
        return model
    except Exception as e:
        logger.error(f"❌ モデル読込エラー: {e}")
        return None